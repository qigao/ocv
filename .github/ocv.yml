name: Build and Upload OpenCV Artifacts

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        opencv-version: ['4.11.0'] # Specify desired OpenCV version
      fail-fast: false

    steps:
    # Checkout the repository
    - uses: actions/checkout@v4

    # Cache OpenCV to avoid rebuilding
    - name: Cache OpenCV
      id: cache-opencv
      uses: actions/cache@v4
      with:
        path: |
          ./opencv-install
          ${{ runner.os == 'Windows' && 'C:/opencv-install' || '' }}
        key: ${{ runner.os }}-opencv-${{ matrix.opencv-version }}
        restore-keys: ${{ runner.os }}-opencv-

    # Install OpenCV on Linux
    - name: Setup OpenCV (Linux)
      if: matrix.os == 'ubuntu-latest' && steps.cache-opencv.outputs.cache-hit != 'true'
      uses: Dovyski/setup-opencv-action@v1.1
      with:
        opencv-version: ${{ matrix.opencv-version }}
        install-deps: true
        opencv-contrib: true
        cmake-args: '-DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF'

    # Install OpenCV on Windows
    - name: Setup OpenCV (Windows)
      if: matrix.os == 'windows-latest' && steps.cache-opencv.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p opencv-install
        cd opencv-install
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git
        mkdir build && cd build
        cmake -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
          -DCMAKE_INSTALL_PREFIX=../install \
          ../opencv
        mingw32-make -j$(nproc)
        mingw32-make install
        cd ../..
        mv opencv-install/install C:/opencv-install

    # Set environment variables for OpenCV
    - name: Set OpenCV Environment Variables
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "OpenCV_DIR=/usr/local/lib/cmake/opencv4" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        else
          echo "OpenCV_DIR=C:/opencv-install/lib/cmake/opencv4" >> $GITHUB_ENV
          echo "PATH=C:/opencv-install/bin;$PATH" >> $GITHUB_ENV
        fi

    # Verify OpenCV installation
    - name: Verify OpenCV Installation
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          pkg-config --modversion opencv4
        else
          dir C:/opencv-install/bin
        fi

    # Package build results
    - name: Package OpenCV Artifacts
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czf opencv-${{ matrix.opencv-version }}-linux.tar.gz -C /usr/local .
        else
          powershell -command "Compress-Archive -Path C:/opencv-install/* -DestinationPath opencv-${{ matrix.opencv-version }}-windows.zip"
        fi

    # Upload artifacts
    - name: Upload OpenCV Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opencv-${{ matrix.opencv-version }}-${{ matrix.os }}
        path: |
          opencv-${{ matrix.opencv-version }}-*.tar.gz
          opencv-${{ matrix.opencv-version }}-*.zip
        retention-days: 7
