name: Build and Upload OpenCV World with FFmpeg Artifacts (Linux)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-linux:
    strategy:
      matrix:
        ubuntu-version: ['ubuntu-22.04', 'ubuntu-24.04']
        opencv-version: ['4.11.0'] # You can add more versions here
      fail-fast: false

    runs-on: ${{ matrix.ubuntu-version }}

    steps:
    - name: Debug Info
      run: |
        echo "Runner OS: ${{ runner.os }}"
        echo "Ubuntu Version: ${{ matrix.ubuntu-version }}"
        echo "OpenCV Version: ${{ matrix.opencv-version }}"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"

    - uses: actions/checkout@v4

    - name: Cache OpenCV (Linux)
      id: cache-opencv
      uses: actions/cache@v4
      with:
        path: ./opencv-install
        key: ${{ matrix.ubuntu-version }}-opencv-${{ matrix.opencv-version }}-world-ffmpeg-debug-release

    - name: Prepare OpenCV Build Directory (if cache miss)
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: mkdir -p opencv-install

    - name: Install Dependencies (Linux)
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          git \
          libgtk2.0-dev \
          pkg-config \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          libtbb-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libdc1394-dev \
          ffmpeg

    - name: Clone OpenCV (Linux)
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      working-directory: ./opencv-install
      run: |
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git

    - name: Configure OpenCV (Linux)
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      working-directory: ./opencv-install
      run: |
        # Configure Debug build
        mkdir -p build-debug
        cd build-debug
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_opencv_world=ON \
          -DWITH_FFMPEG=ON \
          -DBUILD_TESTS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
          -DCMAKE_INSTALL_PREFIX=../install-debug \
          ../opencv
        cd ..
        
        # Configure Release build
        mkdir -p build-release
        cd build-release
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_opencv_world=ON \
          -DWITH_FFMPEG=ON \
          -DBUILD_TESTS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
          -DCMAKE_INSTALL_PREFIX=../install-release \
          ../opencv

    - name: Build and Install OpenCV (Linux)
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        # Build and install Debug
        cd opencv-install/build-debug
        make -j$(nproc)
        make install
        cd ../..
        
        # Build and install Release
        cd opencv-install/build-release
        make -j$(nproc)
        make install
        cd ../..

    - name: Set OpenCV Environment Variables (Linux)
      shell: bash
      run: |
        echo "OpenCV_DIR=${{ github.workspace }}/opencv-install/install/lib/cmake/opencv4" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${{ github.workspace }}/opencv-install/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=${{ github.workspace }}/opencv-install/install/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Package OpenCV Artifacts (Linux)
      shell: bash
      run: |
        # Create a combined directory with both Debug and Release
        mkdir -p opencv-install/install-combined
        cp -r opencv-install/install-debug/* opencv-install/install-combined/
        cp -r opencv-install/install-release/* opencv-install/install-combined/
        
        tar -czf opencv-world-${{ matrix.opencv-version }}-${{ matrix.ubuntu-version }}-debug-release.tar.gz \
          -C opencv-install/install-combined .

    - name: Upload OpenCV Artifacts (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: opencv-world-${{ matrix.opencv-version }}-${{ matrix.ubuntu-version }}-debug-release
        path: opencv-world-${{ matrix.opencv-version }}-${{ matrix.ubuntu-version }}-debug-release.tar.gz
        retention-days: 7