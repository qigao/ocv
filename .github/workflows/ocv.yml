name: Build and Upload OpenCV Artifacts

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        opencv-version: ['4.11.0']
      fail-fast: false

    steps:
    # Debug: Print environment
    - name: Debug Info
      run: |
        echo "Runner OS: ${{ matrix.os }}"
        echo "OpenCV Version: ${{ matrix.opencv-version }}"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"

    # Checkout the repository
    - uses: actions/checkout@v4

    # Cache OpenCV
    - name: Cache OpenCV
      id: cache-opencv
      uses: actions/cache@v4
      with:
        path: ./opencv-install
        key: ${{ runner.os }}-opencv-${{ matrix.opencv-version }}

    # Linux: Install dependencies
    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          git \
          libgtk2.0-dev \
          pkg-config \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          libtbb12 \
          libtbb-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libdc1394-dev

    # Linux: Clone OpenCV repositories
    - name: Clone OpenCV (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p opencv-install
        cd opencv-install
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git
        cd ..

    # Linux: Configure OpenCV
    - name: Configure OpenCV (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p opencv-install/build
        cd opencv-install/build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
          -DCMAKE_INSTALL_PREFIX=../install \
          ../opencv
        cd ../..

    # Linux: Build OpenCV
    - name: Build OpenCV (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd opencv-install/build
        make -j$(nproc)
        cd ../..

    # Linux: Install OpenCV
    - name: Install OpenCV (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd opencv-install/build
        sudo make install
        cd ../..

    # Windows: Clone OpenCV repositories
    - name: Clone OpenCV (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo "Cloning OpenCV repositories"
        mkdir opencv-install
        cd opencv-install
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git
        git clone --depth 1 --branch ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git
        cd ..

    # Windows: Configure OpenCV
    - name: Configure OpenCV (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo "Configuring OpenCV with MSVC 2022"
        mkdir opencv-install\build
        cd opencv-install\build
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DBUILD_EXAMPLES=OFF ^
          -DBUILD_TESTS=OFF ^
          -DBUILD_PERF_TESTS=OFF ^
          -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ^
          -DCMAKE_INSTALL_PREFIX=../install ^
          ../opencv
        cd ../..

    # Windows: Build and Install OpenCV
    - name: Build and Install OpenCV (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo "Building and installing OpenCV"
        cd opencv-install\build
        msbuild INSTALL.vcxproj /p:Configuration=Release /m
        cd ../..

    # Set environment variables for OpenCV
    - name: Set OpenCV Environment Variables
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "OpenCV_DIR=$(pwd)/opencv-install/install/lib/cmake/opencv4" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$(pwd)/opencv-install/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        else
          echo "OpenCV_DIR=$(pwd)/opencv-install/install/lib/cmake/opencv4" >> $GITHUB_ENV
          echo "PATH=$(pwd)/opencv-install/install/bin;$PATH" >> $GITHUB_ENV
        fi

    # Verify OpenCV installation
    - name: Verify OpenCV Installation
      shell: ${{ matrix.os == 'ubuntu-latest' && 'bash' || 'powershell' }}
      run: |
        if ("${{ matrix.os }}" -eq "ubuntu-latest") {
          pkg-config --modversion opencv4
        } else {
          dir ./opencv-install/install/bin
        }

    # Package OpenCV artifacts
    - name: Package OpenCV Artifacts
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czf opencv-${{ matrix.opencv-version }}-linux.tar.gz -C opencv-install/install .
        else
          powershell -command "Compress-Archive -Path ./opencv-install/install/* -DestinationPath opencv-${{ matrix.opencv-version }}-windows.zip"
        fi

    # Upload OpenCV artifacts
    - name: Upload OpenCV Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opencv-${{ matrix.opencv-version }}-${{ matrix.os }}
        path: |
          opencv-${{ matrix.opencv-version }}-*.tar.gz
          opencv-${{ matrix.opencv-version }}-*.zip
        retention-days: 7